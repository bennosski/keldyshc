#include "integration.h"
#include "params.h"
#include "matsubara.h"

void init_rcorr(double * rcorr)
{

}

//------------------------------------------------------------
void init_integrator(integrator * integ)
{
  integ->rcorr = (double *)MKL_malloc(order*order*order*sizeof(double), MEM_DATA_ALIGN);
  init_rcorr(integ->rcorr);

  integ->gregory_matrix_M = (double *)MKL_malloc(ntau*ntau*sizeof(double), MEM_DATA_ALIGN);

  integ->gregory_matrix_R = (double *)MKL_malloc(nt*nt*sizeof(double), MEM_DATA_ALIGN);

}

//------------------------------------------------------------
void MxM(const int order, integrator * restrict integ, matsubara * restrict A, cdouble * Cmk)
{
  /*
  int iorb, korb, m, k, l;
  for(iorb=0; iorb<norb; iorb++)
    for(korb=0; korb<norb; korb++)
    {
      for(m=ntau-order; m<ntau-1; m++)
        for(k=ntau-order; k<ntau; k++)
	  for(l=0; l<order; l++)  
	    Cmk[m iorb k korb] += I*dtau * integ->rcorr[ntau-1-m l ntau-1-k] * A->sig * A->M[ntau-1-l iorb korb];
	 
      for(m=0; m<ntau-order; m++)
        for(k=0; k<ntau-m; k++)
	  Cmk[m iorb m+k korb] += -I*dtau * integ->gregory_matrix_M[ntau-1-m k] * A->sig * A->M[ntau-1-k iorb korb];
	
      for(m=1; m<order; m++)
	for(k=0; k<order; k++)
	  for(l=0; l<order; l++)
	    Cmk[m iorb k korb] += -I*dtau * integ->rcorr[m l k] * A->M[l irob, korb];

      for(m=order; m<ntau; m++)
	for(k=0; k<m+1; k++)
	  Cmk[m iorb k korb] += -I*dtau * integ->gregory_matrix_M[m k] * A->M[m-k iorb korb];
    }

  */
}

